"use strict";angular.module("runewordsApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngTouch","angular.filter"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).when("/runewords",{templateUrl:"views/runewords.html",controller:"RunewordsCtrl",controllerAs:"runewords"}).otherwise({redirectTo:"/"})}]),angular.module("runewordsApp").controller("MainCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("runewordsApp").controller("RunewordsCtrl",["RunewordsAPI","ItemTypeAPI","PropertyAPI",function(a,b,c){var d=this;d.name="Runewords",d.all=a.get(),d.itemTypes=b.get(),d.properties=c.get(),d.currentId=null,d.itemType="All item types",d.itemTypeSelect="",d.setItemType=function(a){d.itemType=a},d.isSelected=function(a){return d.currentId===a},d.selectId=function(a){return d.currentId=a},d.clearId=function(){return d.currentId=null}}]);var apiBaseUrl="http://runewords-api.herokuapp.com/api/v1/";angular.module("runewordsApp").factory("RunewordsAPI",["$resource",function(a){return a(apiBaseUrl+"runewords")}]);var apiBaseUrl="http://runewords-api.herokuapp.com/api/v1/";angular.module("runewordsApp").factory("ItemTypeAPI",["$resource",function(a){return a(apiBaseUrl+"item_types")}]);var apiBaseUrl="http://runewords-api.herokuapp.com/api/v1/";angular.module("runewordsApp").factory("PropertyAPI",["$resource",function(a){return a(apiBaseUrl+"properties")}]),angular.module("runewordsApp").run(["$templateCache",function(a){a.put("views/main.html",'<div class="jumbotron"> <div class="container"> <h1>Diablo II Runewords</h1> <p class="lead"> </p><p><a class="btn btn-lg btn-success" ng-href="#/runewords">Get Started!</a></p> </div> </div> <div class="container"> <div class="row marketing"> <h4>Runewords</h4> <p> Once a socketed item has been filled with the correct runes in the correct order, you get a Runeword. </p> <h4>Runes</h4> <p> Runes bestow properties onto socketed items. A rune fills these sockets and is not easily removed. </p> <h4>Properties</h4> <p> Properties add immense power to items in Diablo II. They are (almost) always beneficial and can make the difference between a good item and a great item. </p> <h4>Items</h4> <p>For an item to become a runeword it must have the correct amount of sockets and be the correct type of item.</p> </div> </div>'),a.put("views/runewords.html",'<div class="container"> <div class="klass-page"> <div class="klass-title"> <h1>{{ runewords.name }}</h1> </div> <div class="klass-body col-md-12"> <div class="klass-filtering"> <div class="item-type-dropdown col-md-offset-1 col-md-5"> <div class="dropdown"> <label for="item-type-box"> Sort by item types: <select name="item-type-box" id="item-type-box" size="1" ng-model="runewords.itemTypeSelect"> <option value=""> All item types </option> <option ng-repeat="itemType in runewords.itemTypes[\'item_types\']" value="{{ itemType.name }}"> {{ itemType.name }} </option> </select> </label> </div> </div> <div class="search-box col-md-offset-1 col-md-5"> <label for="Search"> Search: <input type="text" value="Search" name="Search" ng-model="searchText"> </label> </div> <div class="property-category-checkboxes col-md-offset-1 col-md-5"> <label for="property-checkbox"> Select properties: <div ng-model="runewords.categories" ng-repeat="property in runewords.properties[\'properties\']\n                  | unique: \'group\'"> <input name="property-checkbox" id="property-checkbox" value="{{property.group}}" type="checkbox" inverted> {{ property.group | ucfirst }} </div> </label> </div> </div> <div class="klass-description col-md-12"> <p> When certain runes are placed in the correct order into socketed items, they can make Runewords. </p> <p> Try sorting by your highest level rune. </p> </div> <div class="klass-list"> <ul class="klass-listing col-md-12"> <li class="klass-list-item col-md-offset-1 col-md-5" ng-repeat="runeword in runewords.all[\'runewords\']\n            | filter:searchText\n            | filter:runewords.itemTypeSelect"> <h5>Runeword name: {{ runeword["name"] }}</h5> <p>Item Types:</p> <ul ng-repeat="item in runeword[\'item_types\']"> <li>{{ item.name }}</li> </ul> <div ng-mouseenter="runewords.selectId(runeword.id)" ng-mouseleave="runewords.clearId()"> <h5 ng-hide="runewords.isSelected(runeword.id)"> Runeword runes: </h5> <ul ng-hide="runewords.isSelected(runeword.id)" ng-repeat="rune in runeword.runes"> <li> {{ rune.name }} </li> </ul> <h5 ng-show="runewords.isSelected(runeword.id)"> Runeword properties: </h5> <ul ng-show="runewords.isSelected(runeword.id)" ng-repeat="prop in runeword.properties"> <li> {{ prop.name }} </li> </ul> </div> </li> </ul> </div> </div> </div> </div>')}]);